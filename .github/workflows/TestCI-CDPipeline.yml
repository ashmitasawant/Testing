name: Deployment Pipeline

# Controls when the workflow will run
on:
  push:
    paths:
     - 'ProcessInfo/ProcessDetails.json'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  getProcessInfo:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    outputs:
      componentIds: ${{ steps.setProcessInfo.outputs.componentIds }}
      packageVersion: ${{ steps.setProcessInfo.outputs.packageVersion }}
      processNames: ${{steps.setProcessInfo.outputs.processNames}}
      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Process Info
        uses: actions/checkout@v2
      - id: setProcessInfo
        run: |
            ProcessDetails=$(cat ./ProcessInfo/ProcessDetails.json)
            packageVersion=$(echo  ${ProcessDetails} | jq '.[] | .packageVersion')
            echo $packageVersion
            processName=$(echo ${ProcessDetails} | jq '.[] | .processDetails[].processName')
            componentID=$(echo  ${ProcessDetails} | jq '.[] | .processDetails[].componentID')
            environmentID=$(echo  ${ProcessDetails} | jq '.[] | .processDetails[].environmentID')
            echo "::set-output name=packageVersion::$packageVersion"
            ComponentsArray=$(echo $componentID)
            echo "::set-output name=componentIds::$ComponentsArray"
            ProcessNamesArray=$(echo $processName)
            echo $ProcessNamesArray
            echo "::set-output name=processNames::$ProcessNamesArray"
            
            
           
  createPackage:
   environment: Dev
   env: 
      MY_AUTHORIZATION: ${{ secrets.MY_AUTHORIZATION }}
   runs-on: ubuntu-latest   
   outputs:
    packageId: ${{ steps.packageCreation.outputs.packageIds }}
   needs: getProcessInfo
   steps:
      - uses: actions/checkout@v2
      - name: Package Creation
        id: packageCreation
        run: |
               
               for i in ${{needs.getProcessInfo.outputs.componentIds}}
               do
                 CODE=`curl  --request POST \
                               --header 'authorization: ${{env.MY_AUTHORIZATION}}' \
                               --header 'content-type: application/json' \
                               --header 'accept: application/json' \
                               --url 'https://api.boomi.com/api/rest/v1/trainingashmitasawant-D9P8J7/PackagedComponent' \
                               --data '{"componentId": "'$i'","packageVersion":"1.115", "notes":"Package for deployment" }'`
                               echo $CODE
                               
                               packageIds=$(echo ${CODE} | jq '.packageId')
                               packageIdsArray+="$packageIds "
                               echo $packageIdsArray >> PackageIds.txt
                               git config user.name ashmitasawant
                               git config user.email ashmitasawant3@gmail.com
                               git add .
                               git commit -m "Published Changes"
                               git config pull.rebase false
                               git push --force origin main
                               
                                            
               done
               
               echo "::set-output name=packageIds::$packageIdsArray"
     
  deployPackage: 
   environment: Dev
   env: 
      MY_AUTHORIZATION: ${{ secrets.MY_AUTHORIZATION }}
      DEVENVIRONMENT_ID: ${{ secrets.DEVENVIRONMENT_ID }}
   runs-on: ubuntu-latest    
   needs: [createPackage,getProcessInfo]
   steps:     
     - name: Package Deploy
       id: packageDeploy
       run: |
             echo ${{needs.createPackage.outputs.packageId}}
             for p in ${{needs.createPackage.outputs.packageId}}
               do
                 CODE=`curl  --request POST \
                               --header 'authorization: ${{env.MY_AUTHORIZATION}}' \
                               --header 'content-type: application/json' \
                               --header 'accept: application/json' \
                               --url 'https://api.boomi.com/api/rest/v1/trainingashmitasawant-D9P8J7/DeployedPackage' \
                               --data '{"environmentId": "${{env.DEVENVIRONMENT_ID}}","packageId": "'$p'"}'`
                               
                               echo $CODE              
               done         
     
  processExecution:
   runs-on: ubuntu-latest
   needs: [getProcessInfo, deployPackage]   
   steps:     
     - name: Process Execution
       run: |
             processes=($(echo ${{needs.getProcessInfo.outputs.processNames}}))
             
             if [[ ${processes[*]} =~ (^|[[:space:]])TestWS($|[[:space:]]) ]]; 
             then
                  CODE=`curl --write-out '%{http_code}' \
                        --request POST \
                        --header 'authorization: Basic dHJhaW5pbmdhc2htaXRhc2F3YW50LUQ5UDhKNy5ZRzFGQTQ6OWJmZDM5NWUtMzYxZC00MWFkLTgxMDctMTU0ZjU5Mzg0MDJm' \
                        --header 'content-type: application/json' \
                        --url 'https://c01-sg.integrate.boomi.com/ws/rest/personDetails/v1/personDetails/' \
                        --data '    {
                                      "name":"Ashmita",
                                      "age":25,
                                      "role":"Software Engineer"
                                     }'
                        --data '    {
                                      "name":"Krisha",
                                      "age":27,
                                      "role":"Software Developer"
                                     }'`
                        if [[ $CODE == *"200"* ]]
                        then
                           echo "The process executed successfully"
                        else 
                           echo $CODE
                        fi
             fi
             if [[ ${processes[*]} =~ (^|[[:space:]])TestForWS($|[[:space:]]) ]]; 
             then
                  CODE=`curl --write-out '%{http_code}' \
                        --request POST \
                        --header 'authorization: Basic dHJhaW5pbmdhc2htaXRhc2F3YW50LUQ5UDhKNy5ZRzFGQTQ6OWJmZDM5NWUtMzYxZC00MWFkLTgxMDctMTU0ZjU5Mzg0MDJm' \
                        --header 'content-type: application/json' \
                        --url 'https://c01-sg.integrate.boomi.com/ws/rest/employeeDetails/v1/employeeDetails/' \
                        --data '    {
                                      "name":"Abhishek",
                                      "age":20,
                                      "role":"Software Developer"
                                     }'`
                        if [[ $CODE == *"200"* ]]
                        then
                           echo "The process executed successfully"
                        else 
                           echo $CODE
                        fi
             fi 
