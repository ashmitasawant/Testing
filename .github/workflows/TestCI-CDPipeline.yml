name: Deployment Pipeline

# Controls when the workflow will run
on:
  push

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  getProcessInfo:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    outputs:
      output1: ${{ steps.setProcessInfo.outputs.componentID }}
      output2: ${{ steps.setProcessInfo.outputs.environmentID }}
      output3: ${{ steps.setProcessInfo.outputs.packageVersion }}
      output4: ${{ steps.setProcessInfo.outputs.componentID_Array }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Process Info
        uses: actions/checkout@v2
      - id: setProcessInfo
        run: |
            ProcessDetails=$(cat ./ProcessInfo/ProcessDetails.json)
            packageVersion=$(echo  ${ProcessDetails} | jq '.[] | .packageVersion')
            echo $packageVersion
            componentID=$(echo  ${ProcessDetails} | jq '.[] | .processDetails[].componentID')
            environmentID=$(echo  ${ProcessDetails} | jq '.[] | .processDetails[0].environmentID')
            echo "::set-output name=componentID::$componentID"
            echo "::set-output name=environmentID::$environmentID"
            echo "::set-output name=packageVersion::$packageVersion"
            componentIdsArray=($(echo [$componentID]))
            componentIds=($(
                  for i in ${componentIdsArray[@]}
                  do
                    echo -ne "$i,"
                  done
                  ) )
                  componentIds=${componentIds:0:-1}
                  echo ${componentIds//,/,}
            echo $componentIds
            echo "::set-output name=componentID_Array ::$componentIds"       
            
  createPackage:
   environment: Dev
   env: 
      MY_USERNAME: ${{ secrets.MY_USERNAME }}
      MY_PASSWORD: ${{ secrets.MY_PASSWORD }}
   runs-on: ubuntu-latest
   outputs:
    packageCreationResponse: ${{ steps.packageCreation.outputs.response }}
    packageId: ${{ steps.packageCreation.outputs.packageId }}
   strategy:
    matrix: 
      componentIdsList: ${{fromJson(needs.getProcessInfo.outputs.output4)}}
      
      
   needs: getProcessInfo
   steps:
      - uses: actions/checkout@v2
      - name: test
        id: packageCreation
        run: |
                   
                            for i in 1 2 3 4 5
                            do
                               echo $i
                               
                              
                               echo $i >> PackageIds.txt
                               git config user.name ashmitasawant
                               git config user.email ashmitasawant3@gmail.com
                               git add .
                               git commit -m "Published Changes"
                               git config pull.rebase false
                               git push --force origin main
                               echo "::set-output name=packageId::[$packageIds]"       
                              done
                             
  
                             
                             
                             
     
                             
  
            
                          
                 
        
  
