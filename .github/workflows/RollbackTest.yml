name: Rollback Deployment

# Controls when the workflow will run
on:
  push:
   

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  createPackage:
    # The type of runner that the job will run on
    environment: Dev
    env: 
     MY_AUTHORIZATION: ${{ secrets.MY_AUTHORIZATION }}
    runs-on: ubuntu-latest
    outputs:
     packageId: ${{ steps.packageCreate.outputs.packageIds }}
     packageVersion: ${{steps.packageCreate.outputs.packageVersions}}
     componentId: ${{steps.packageCreate.outputs.componentIds}}
     componentVersion: ${{steps.packageCreate.outputs.componentVersions}}
    
   
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Create Package
        uses: actions/checkout@v2
      - id: packageCreate
        run: |
              CODE=`curl  --request POST \
                               --header 'authorization: ${{env.MY_AUTHORIZATION}}' \
                               --header 'content-type: application/json' \
                               --header 'accept: application/json' \
                               --url 'https://api.boomi.com/api/rest/v1/trainingashmitasawant-D9P8J7/PackagedComponent' \
                               --data '{"componentId": "aafd5e29-e75d-4bdb-9ec9-5b94ffd024d4","packageVersion":"v1.31", "notes":"Initial Package" }'`
                               echo $CODE
                               
                               packageIds=$(echo ${CODE} | jq '.packageId')
                               packageVersion=$(echo ${CODE} | jq '.packageVersion')
                               componentIds=$(echo ${CODE} | jq '.componentId')
                               componentVersion=$(echo ${CODE} | jq '.componentVersion')
                               
                               echo "::set-output name=packageIds::$packageIds"
                               echo "::set-output name=packageVersions::$packageVersion"
                               echo "::set-output name=componentIds::$componentIds"
                               echo "::set-output name=componentVersions::$componentVersion"
               
  getInfo:
   runs-on: ubuntu-latest
   needs: createPackage
   steps:
     - name: Getting Information 
       uses: actions/checkout@v2

     - id: settingInfo
     
       
       run: |
             infoArray=[]
             details=$(echo '{
                              "packageId": ${{needs.createPackage.outputs.packageId}},
                              "packageVersion": ${{needs.createPackage.outputs.packageVersion}},
                              "componentId": ${{needs.createPackage.outputs.componentId}},
                              "componentVersion": ${{needs.createPackage.outputs.componentVersion}}
                      }')
             infoArray+="$details, "
             echo $infoArray >> packages.json
                              
                               git config user.name ashmitasawant
                               git config user.email ashmitasawant3@gmail.com
                               git add .
                               git commit -m "Published Changes"
                               git config pull.rebase false
                               git push --force origin main
            
     
       
